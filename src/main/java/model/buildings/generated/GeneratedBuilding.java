package model.buildings.generated;

import com.fasterxml.jackson.annotation.*;
import controller.GameManager;
import model.Coordinate;
import model.Person;
import model.buildings.Building;
import model.field.PlayableField;
import util.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * This class represents a generated building that is generated by the game.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = Workplace.class, name = "workplace"),
        @JsonSubTypes.Type(value = ResidentialBuilding.class, name = "residential")
})
public abstract class GeneratedBuilding extends Building {
    protected List<Person> people;
    protected int publicSafety;
    protected int maxCapacity;

    /**
     * Constructor of the generated building
     *
     * @param coords          is the coordinates of the building
     * @param firePossibility is the fire possibility of the building
     * @param isOnFire        is the building on fire
     * @param people          is the people in the building
     * @param publicSafety    is the public safety of the building
     */
    @JsonCreator
    public GeneratedBuilding(@JsonProperty("coords") Coordinate coords, @JsonProperty("firePossibility") double firePossibility, @JsonProperty("isOnFire") boolean isOnFire, @JsonProperty("people") ArrayList<Person> people, @JsonProperty("publicSafety") int publicSafety) {
        super(coords, firePossibility, isOnFire);
        this.people = people;
        this.maxCapacity = GameManager.getLevelOneMaxCapacity();
        this.publicSafety = publicSafety;
    }

    /**
     * Add a person to the building
     *
     * @param person is the person to add
     */
    public abstract void addPerson(Person person);

    /**
     * Remove a person from the building
     *
     * @param person is the person to remove
     */
    public abstract void removePerson(Person person);

    /**
     * Get the max capacity of the building
     *
     * @return the max capacity of the building
     */
    public int getMaxCapacity() {
        return maxCapacity;
    }

    /**
     * Setter for the max capacity of the building
     *
     * @param maxCapacity is the maximum capacity of the building
     */
    public void setMaxCapacity(int maxCapacity) {
        this.maxCapacity = maxCapacity;
        Logger.log("Max capacity of building at " + coords.toString() + " is now " + maxCapacity);
    }

    /**
     * Get the public safety of the building
     *
     * @return the public safety of the building
     */
    public int getPublicSafety() {
        return publicSafety;
    }

    /**
     * Set the public safety of the building
     *
     * @param publicSafety is the public safety of the building
     */
    public void setPublicSafety(int publicSafety) {
        this.publicSafety = publicSafety;
        Logger.log("Public safety of building at " + coords.toString() + " is now " + publicSafety);
    }

    /**
     * Get the people in the building
     *
     * @return the people in the building
     */
    public List<Person> getPeople() {
        return people;
    }

    /**
     * Set the people in the building
     *
     * @param people is the people in the building
     */
    public void setPeople(List<Person> people) {
        this.people = people;
    }

    @Override
    @JsonIgnore
    public int getMaintenanceCost() {
        return 0;
    }

    @Override
    @JsonIgnore
    public int getBuildCost() {
        return 0;
    }

    @Override
    public void burnDown(){
        Logger.log("Generated building at " + coords.toString() + " burned down");
        ((PlayableField)GameManager.getFields()[coords.getX()][coords.getY()]).demolishGeneratedBuilding(true);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof GeneratedBuilding that)) return false;
        if (!super.equals(o)) return false;
        return getPublicSafety() == that.getPublicSafety() && maxCapacity == that.maxCapacity && Objects.equals(getPeople(), that.getPeople());
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), getPeople(), getPublicSafety(), maxCapacity);
    }
}


